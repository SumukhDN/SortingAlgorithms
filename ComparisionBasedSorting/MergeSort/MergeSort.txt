#MERGESORT
->Merge sort is defined as a sorting algorithm that works by dividing an array into smaller subarrays, sorting each subarray, and
  then merging the sorted subarrays back together to form the final sorted array.


#TIME-COMPLEXITY
 *Î¸(Nlog(N)) --->  (worst, average, and best)
->As merge sort always divides the array into two halves and takes linear time to merge two halves.


#SPACE-COMPLEXITY  --> O(N)


#APPLICATIONS
->Sorting large datasets: Due to its guaranteed worst-case time complexity of O(n log n).
->External sorting: Merge sort is commonly used in external sorting, where the data to be sorted is too large to fit into memory.
->Custom sorting: Merge sort can be adapted to handle different input distributions, such as partially sorted, nearly sorted,
  or completely unsorted data.
->Inversion Count Problem


#ADVANTAGES
->Stability: Merge sort is a stable sorting algorithm, which means it maintains the relative order of equal elements in the input array.
->Guaranteed worst-case performance: Merge sort has a worst-case time complexity of O(N logN), which means it performs well 
  even on large datasets.
->Parallelizable: Merge sort is a naturally parallelizable algorithm, which means it can be easily parallelized to take advantage
  of multiple processors or threads.


#DISADVANTAGES
->Space complexity: Merge sort requires additional memory to store the merged sub-arrays during the sorting process. 
->Not in-place: Merge sort is not an in-place sorting algorithm, which means it requires additional memory to store the sorted data.
->Not always optimal for small datasets: For small datasets, Merge sort has a higher time complexity than some other sorting algorithmMS,
  than some other sorting algorithmMS such as insertion sort. This can result in slower performance for very small datasets.


#CONCLUSION
->Stable
->Not In-Place
->Not for small datasets
->Suited for large data sets
->Guaranteed worst case (Time complexity same for all 3 cases)
